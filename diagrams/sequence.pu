@startuml Solcast Contract Flow

actor Admin
actor User
participant "Solcast Program" as SolcastProgram
participant "State" as State
participant "Market" as Market
participant "Market Authority PDA" as MarketAuthority
participant "SPL Token Program" as TokenProgram
participant "Option A Token" as TokenAMint
participant "Option B Token" as TokenBMint
participant "User Token Account" as UserTokenAccount
participant "Market Token Account" as MarketTokenAccount

== Program Initialization ==

Admin -> SolcastProgram: initialize()
SolcastProgram -> State: create new state account
State --> SolcastProgram: state created
SolcastProgram --> Admin: initialization complete

== Market Creation ==

Admin -> SolcastProgram: createMarket(id, options, endTime, buyToken, etc)
SolcastProgram -> State: validate admin
State --> SolcastProgram: admin verified
SolcastProgram -> MarketAuthority: derive PDA for market
MarketAuthority --> SolcastProgram: authority PDA returned
SolcastProgram -> TokenProgram: create token A mint (TokenAMint)
TokenProgram --> SolcastProgram: token A mint created
SolcastProgram -> TokenProgram: create token B mint (TokenBMint)
TokenProgram --> SolcastProgram: token B mint created
SolcastProgram -> Market: create market account with options
Market --> SolcastProgram: market created
SolcastProgram -> State: add market ID to state
State --> SolcastProgram: state updated
SolcastProgram --> Admin: market created successfully

== Buy Shares ==

User -> SolcastProgram: buyShare(marketId, option, amount)
SolcastProgram -> Market: validate market not resolved
Market --> SolcastProgram: validation passed
SolcastProgram -> UserTokenAccount: transfer tokens to market escrow
UserTokenAccount -> MarketTokenAccount: tokens transferred
MarketTokenAccount --> SolcastProgram: transfer complete

note over SolcastProgram, TokenProgram: Mint option tokens based on user's selection

alt User chose Option A
    SolcastProgram -> TokenProgram: mint option A tokens to user (signed by PDA)
    TokenProgram -> TokenAMint: mint tokens
    TokenAMint --> User: option A tokens received
else User chose Option B
    SolcastProgram -> TokenProgram: mint option B tokens to user (signed by PDA)
    TokenProgram -> TokenBMint: mint tokens
    TokenBMint --> User: option B tokens received
end

SolcastProgram -> Market: update market state (total shares)
SolcastProgram -> Market: update user's share record
Market --> SolcastProgram: market updated
SolcastProgram --> User: share purchase complete

== Resolve Market ==

Admin -> SolcastProgram: resolve(marketId, winningOption)
SolcastProgram -> State: validate admin
State --> SolcastProgram: admin verified
SolcastProgram -> Market: validate market not already resolved
Market --> SolcastProgram: validation passed
SolcastProgram -> Market: set resolved=true and outcome
Market --> SolcastProgram: market resolved
SolcastProgram --> Admin: market resolution complete

== Withdraw Winnings ==

User -> SolcastProgram: withdraw(marketId)
SolcastProgram -> Market: check if market resolved
Market --> SolcastProgram: market is resolved
SolcastProgram -> Market: find user's winning shares
Market --> SolcastProgram: shares found
SolcastProgram -> Market: calculate winnings
Market --> SolcastProgram: winnings calculated
SolcastProgram -> Market: mark shares as withdrawn
Market --> SolcastProgram: shares marked
SolcastProgram -> MarketAuthority: sign transaction with PDA
MarketAuthority --> SolcastProgram: signature provided
SolcastProgram -> TokenProgram: transfer winnings from market to user
TokenProgram -> MarketTokenAccount: debit market account
MarketTokenAccount -> UserTokenAccount: credit user account
UserTokenAccount --> User: winnings received
SolcastProgram --> User: withdrawal complete

@enduml
